#summary Getting started with the threedhst package

= Set up your Python environment = 

The easiest way to get everything right is by downloading and installing STScI  Python from [http://www.stsci.edu/resources/software_hardware/pyraf/stsci_python/current/download here].

Download the full installation `stsci_iraf_intel_2.10.dmg` (as of June 2010) and install from the package.

The STScI Python packages seems to require `csh`, which is a bit of a pain since the Mac defaults to `bash`.  After the installation, generate a `login.cl` file in `${HOME}/iraf`.

{{{
$ csh
% cd ~
% mkdir iraf
% mkiraf       #generate login.cl, answer other prompts
% pyraf
}}}

I would recommend using the [http://ipython.scipy.org/moin/ IPython] command line environment for Python and PYRAF.  
{{{
$ csh
% ipython   ### answer prompts to set up ipython.  Ctrl-d to exit
% pyraf --ipython
}}}

Next, download *aXe2html* from [http://www.stecf.org/software/slitless_software/axe/installation.php].  aXe2html doesn't seem to work with the exact Python configuration as installed by STScI Python, but can be fixed as follows:

{{{
cd $THREED_ROOT   # See below
tar xzvf ~/Downloads/aXe2html-1.1.tar.gz
cd aXe2html-1.1

perl -pi -e "s/import Image/from PIL import Image/" setup.py
perl -pi -e "s/import Image, ImageDraw/from PIL import Image, ImageDraw/" ./aXe2html/irafims/irafimtools.py
perl -pi -e "s/import Image, os, string, math/from PIL import Image\nimport string, os,math/" ./aXe2html/spectra/outdata.py
perl -pi -e "s/import Image/from PIL import Image/" ./aXe2html/spectra/plot_spc.py
perl -pi -e "s/import Image, os, string, math/from PIL import Image\nimport string, os,math/" ./aXe2html/spectra/plotspectra.py

cd ..   # make sure you install with the STScI Python
ln -s ${PWD}/aXe2html-1.1/aXe2html .
}}}

This last step makes aXe2html available to Python, but doesn't compile and install its command-line programs.

= Download and install `threedhst`=

Pick some root directory where you want to place the code, say $HOME.

{{{  
export THREED_ROOT=$HOME 
}}}

This directory needs to be in your PYTHONPATH to be able to find it from within PyRAF. 

{{{
export PYTHONPATH="${PYTHONPATH}:$THREED_ROOT"
}}}

Included in the distribution are some wrappers around some of the functions that you can call from the command line.  They will live in `$THREED_ROOT/threedhst/bin`, so add that directory to your path.

{{{
export PATH="${PATH}:$THREED_ROOT/threedhst/bin"
}}}

(You'll probably want to put all of the ``export`` lines in your `~/.bashrc` file so they're loaded each time you start a new terminal.)

Now checkout the code with Subversion (svn):

{{{
cd $THREED_ROOT
svn checkout https://threedhst.googlecode.com/svn/ . --username YOUR_GOOGLE_USERNAME
}}}

It will ask for a password the first time you try to checkout the code.  This can be found at your code.google [https://code.google.com/hosting/settings settings page].  Note that this password is different from your normal google account password for security reasons (SVN caches the password in an unsecure place so you don't have to enter the password every time you checkout or commit the code).

If you want to contribute to the development of the code, send an email to G. Brammer requesting "commit" privileges.  If you don't have a Google account or if you don't have or want the ability to commit changes to the code, you can check out a read-only version with:

{{{
cd $THREED_ROOT
svn checkout http://threedhst.googlecode.com/svn/ .
}}}


= Example = 

Download the 4 threedhst-*tar.gz files from the Downloads tab.

{{{
#### Make example directory
cd $THREED_ROOT
mkdir ERS
cd ERS
mv ~/Downloads/threedhst-*.tar.gz . ## assuming they're in ~/Downloads
#### Make directory structure
tar xvfz threedhst-directories.tar.gz
tar xvfz threedhst-IREF.tar.gz
tar xvfz threedhst-CONF.tar.gz
#### Extract the example GOODS-ERS files to ./RAW
tar xvfz threedhst-ERS-G141.tar.gz

export iref="${PWD}/IREF/"  # This could go in `~/.bashrc` to avoid having to type it every time
csh
pyraf --ipython
}}}

Now, within PYRAF:

{{{
import threedhst

#### Set SExtractor detection threshold to 10-sigma to make the test catalog small.
#### To see the other options currently defined, use threedhst.showOptions()
threedhst.options['DETECT_THRESH'] = 10
threedhst.options['ANALYSIS_THRESH'] = 10

#### Set the filenames for the ERS G141 observations (in ./RAW)
direct = 'ib6o23020_asn.fits'
grism = 'ib6o23010_asn.fits'

#### Run the pipeline
threedhst.process_grism.reduction_script(asn_grism_file=grism, asn_direct_file=direct)
}}}

The pipeline is essentially a wrapper around the aXe routines, producing a catalog and a few other potentially useful files in the process (and this can be developed further, e.g. cleaning up the raw catalogs).  The `ERS/DATA` contains the following files:

    ib6o23010*CONT_asn.fits* - an ASN list used to generate the next file

    ib6o23010*CONT_drz.fits* - a full contamination image of the field, which can be compared to the grism mosaic

    ib6o23010*_asn.fits* - the input *grism* ASN list

    ib6o23010*_drz.fits* - the Multidrizzled mosaic of the grism exposures

    ib6o23010*_shifts.txt* - shifts used by Multidrizzle

    ib6o23010*_zeroth.reg* - A DS9 region file showing where the 0^th^ order objects should appear

    ib6o23020*_asn.fits* - the input *direct* ASN list

    ib6o23020*_asn.pointing.reg* - a DS9 region file with polygons for all of the exposures in the ASN list

    ib6o23020*_drz.cat - SExtractor catalog for the next file

    ib6o23020*_drz.fits* - Multidrizzled mosaic of the direct images

    ib6o23020*_drz.reg* - DS9 region file for the objects in the catalog

    ib6o23020*_seg.fits* - SExtractor segmentation map

    ib6o23020*_shifts.txt* - Shifts used by Multidrizzle, currently found with `tweakshifts`.

    ib6o23020*_tweak.fits* - Dummy WCS file generated by `tweakshifts`.




After the pipeline runs, the output spectra will be stored in `ERS/DRIZZLE_G141`.  All of the 1D extracted spectra are in a single file, `ib6o23020_2_opt.SPC.fits`.  Note that the extensions of this file are not in the same order as the object numbers in the SExtractor catalog; they're sorted like 1, 100, 101, ....  However, the extensions are named with the object number, like `ib6o23020_2_opt.SPC.fits[BEAM_#A]`.

The 2D spectra are in individual files, named `ib6o23020_mef_ID#.fits`, which each have extensions:
{{{
  1 SCI     
  2 ERR     
  3 EXPT    
  4 CON     
  5 MOD     
  6 VAR     
  7 WHT     
}}}